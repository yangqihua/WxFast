<!--确认订单-->
<template>
	<view>
		<view class="address-box">
			<view class="add-address" wx:if="{{!userAddress.name}}">
				<view class="title" @tap="addAddress">新增收货地址</view>
			</view>
			<view class="show-address" wx:else @tap="selectAddress">
				<view class="name-tel">收货人: {{userAddress.name}} {{userAddress.mobile}}</view>
				<view class="address-text">收货地址: {{userAddress.addressDescription}}</view>
			</view>
		</view>

		<view style="margin-bottom: 100rpx">
			<repeat for="{{modelView.storeItems}}" key="index" index="index" item="storeProductItem">
				<view style="background: #fff;">
					<view class="store-list">
						<view class="store-item">{{storeProductItem.storeName}}</view>
						<repeat for="{{storeProductItem.productSkuItems}}" key="index" index="index" item="productItem">
							<view class="product-item">
								<image mode="aspectFill" style="width:180rpx; height:180rpx;"
								       src="{{productItem.thumbnailUrl}}"/>
								<view class="main-text">
									<view>
										<view class="item-name">{{productItem.name}}</view>
										<view class="item-prop">{{productItem.bn}} {{productItem.propertyValueDesc}}
										</view>
									</view>
									<view style="line-height: 40rpx">
										<view class="item-price">￥{{productItem.displayPrice}}</view>
										<view class="item-display-price">￥{{productItem.marketPrice}}</view>
										<view class="item-count">X {{productItem.buyCount}}</view>
									</view>
								</view>
							</view>
						</repeat>
					</view>
					<picker bindchange="bindAddressChange" range-key="value" data-current="{{index}}"
					        range="{{storeProductItem.expressTemplates}}">
						<view class="panel">
							<view class="cell cell-access">
								<view class="cell-body">快递方式</view>
								<view class="cell-right">{{showDelivery[index]['value'] || '请选择'}}</view>
							</view>
						</view>
					</picker>
					<view class="buy-text-input">
						<view class="field-title">
							卖家留言
						</view>
						<textarea
								auto-height
								value="{{ userMessages[index] }}"
								placeholder="填写内容已和卖家协商确认"
								class="field-input cell-body"
								placeholder-class="field-placeholder"
								bindBlur="bindBlur"
						/>
					</view>
					<view class="bottom-container">
						共
						<view>{{storeProductItem.totalCount}}</view>
						件商品
						运费:
						<view>{{storePrices[index].expressAmount }}</view>
						小计:
						<view>{{storePrices[index].totalAmount}}</view>
					</view>
					<view class="panel">
						<view class="cell cell-switch">
							<view class="cell-body">
								<view class="cell-text">使用200积分支付</view>
								<view class="cell-desc">现金账户余额12455.29币</view>
							</view>
							<view class="cell-right">
								<switch checked/>
							</view>
						</view>

						<view class="cell cell-switch">
							<view class="cell-body">
								<view class="cell-text">使用2000虚拟币支付</view>
								<view class="cell-desc">现金账户余额12455.29币</view>
							</view>
							<view class="cell-right">
								<switch checked/>
							</view>
						</view>
					</view>
				</view>
			</repeat>
		</view>

		<view class="footer">
			<view class="total-text">总价:</view>
			<view class="total-money">￥{{priceView.totalAmount}}</view>

			<view class="confirm-btn" @tap="submitOrder">
				<picker bindchange="bindPayChange" range-key="name" range="{{payMethods}}">提交订单</picker>
			</view>
			<view class="total-num">共{{modelView.totalCount}}件商品</view>
		</view>
		<buy-toast/>
	</view>
</template>
<script>
    import wepy from 'wepy';
    import {buyInfo, getUserAddress, getPrice} from '../../../services/api/api'
    import tip from '../../../widgets/common/js/tip'
    import ShowPay from '../../modules/show-pay'
    import Toast from '../../../widgets/toast/index'
    export default class Buy extends wepy.page {
        config = {
            navigationBarTitleText: '确认下单',
            backgroundColor: '#EFEFEF',
            navigationBarTextStyle: '#fff',
            navigationBarBackgroundColor: '#ff5777',
        }
        components = {
            'show-pay': ShowPay,
            'buy-toast': Toast,
        }

        data = {
            orderGoodsList: [],
            userInfo: {},
            userAddress: {},
            payMethods: [
                {id: '1', name: '余额支付(余额70467.16元)'},
                {id: '2', name: '微信支付'},
            ],

            modelView: '', // 商品数据，从服务器上远程获取
            priceView: '', // 价格显示模型
            asyncFlag: false, // 异步数据传递判断，如果没有获取完成则不传递数据子组件中
            showPay: false, // 显示支付方式\
            storePrices: [], // 店铺价格显示
            payAmount: '', // 需要支付的金额，人民币支付
            addressId: '00000000-0000-0000-0000-000000000000', // 地址选择，默认为空,
            userMessages: [], // 留言信息
            isFromCart: false, // 购买信息是否来自购物车，如果是，则需要删除购物车中，相对应的商品数据
            moneyItem: [], // 非人民币资产信息
            showDelivery: [] // 显示物流快递


        }

        async getAddressInfo() {
            this.userAddress = await getUserAddress({id: ''})
            this.$apply()
        }

        async getBuyInfo() {
            let orderParams = [{
                "ProductSkuId": 114,
                "Count": 1,
                "ProductId": 45,
                "storeId": 12,
                "LoginUserId": 1
            },
                {
                    "ProductSkuId": 112,
                    "Count": 1,
                    "ProductId": 45,
                    "storeId": 12,
                    "LoginUserId": 1
                },
                {
                    "ProductSkuId": 139,
                    "Count": 1,
                    "ProductId": 47,
                    "storeId": 13,
                    "LoginUserId": 1
                }]
            orderParams = []
            this.orderGoodsList.forEach((item) => {
                let orderParam = {
                    LoginUserId: this.userInfo.id,
                    ProductSkuId: item['skuId'],
                    ProductId: item['productId'],
                    Count: item['count'],
                    StoreId: item['storeId'],
                }
                orderParams.push(orderParam)
            })
            this.modelView = await buyInfo({
                ProductJson: JSON.stringify(orderParams),
                LoginUserId: this.userInfo.id,
                IsBuy: true
            })
            this.modelView.storeItems.forEach((item) => {
                let activeExpress = item.expressTemplates.length == 0 ? {key: '', value: ''} : item.expressTemplates[0]
                this.showDelivery.push(activeExpress)
            })
            await this.getPrice()
            this.$apply();
        }

        methods = {
            bindPayChange(e){
                let payName = this.payMethods[e.detail.value]['name']
                this.$invoke('buy-toast', 'showToast', {title: '使用 '+payName+' 支付了 '+this.priceView.totalAmount+'元'})
            },
            submitOrder(){
                this.$invoke('show-pay', 'showModel', {});
            },
            async bindAddressChange(e){
                const current = e.target.dataset.current
                this.showDelivery[current] = this.modelView['storeItems'][current]['expressTemplates'][e.detail.value]
                await this.getPrice()

            },
            addAddress(){
                wx.navigateTo({
                    url: '/pages/goods/web-view'
                })
            },
            selectAddress(){
                wx.navigateTo({
                    url: '/pages/goods/web-view'
                })
            }
        }

        async getPrice() {

            let storeDelivery = []
            console.log('this.showDelivery:', this.showDelivery)
            for (let i = 0; i < this.modelView.storeItems.length; i++) {
                let storeItem = this.modelView.storeItems[i]
                let deliveryItem = {
                    key: storeItem.storeId,
                    value: this.showDelivery[i]['key']
                }
                storeDelivery.push(deliveryItem)
            }
            let priceInput = {
                sign: this.modelView.sign, // 传递签名
                loginUserId: this.userInfo.id, // 用户Id
                addressId: this.userAddress.id,
                storeExpressJson: JSON.stringify(storeDelivery)
            }
            this.priceView = await getPrice(priceInput)
            this.storePrices = this.priceView.storePrices
            this.asyncFlag = true
            this.$apply()
        }

        async onLoad(option) {
            this.userInfo = await this.$parent.getUserInfo()
            this.orderGoodsList = this.$parent.globalData['orderGoodsList']
            console.log('this.orderGoodsList:', this.orderGoodsList)
            await this.getAddressInfo()
            await this.getBuyInfo()
        }

        computed = {}

        events = {}
    }

</script>
<style lang="less" rel="stylesheet/less">
	@import "../../../widgets/panel/panel";
	@import "../../../widgets/cell/cell";

	.bottom-container {
		padding: ~'12rpx 30rpx';
		line-height: ~'50rpx';
		font-size: @title-font-size;
		float: right;
		view {
			display: inline-block;
			color: @active-color;
			font-size: @price-font-size;
			font-weight: bold;
		}

	}

	.buy-text-input {
		padding: ~'30rpx 30rpx';
		display: flex;
		font-size: @title-font-size;
		line-height: ~'32rpx';
		background: #fff;
		border-bottom: ~'1rpx' solid @hairline-color;
		.field-title {

		}
		.field-input {
			flex: 1;
			padding-left: ~'36rpx';
			color: #666;
			/*line-height: ~'50rpx';*/
			/*padding: ~'8rpx 0';*/
			/*min-height: ~'44rpx';*/
		}

		.field-placeholder {
			color: @hint-color;
		}
	}

	.panel {
		background: #fff;
		width: 100%;
	}

	.store-list {
		margin-top: ~'20rpx';
		background: #fff;
	}

	.store-item {
		padding: ~'12rpx 30rpx';
		border-bottom: ~'1rpx' solid @hairline-color;
		line-height: ~'54rpx';
		color: @title-color;
		font-size: @title-font-size;
	}

	.product-item {
		padding: ~'16rpx 30rpx';
		display: flex;
		justify-content: space-between;
	}

	.main-text {
		flex: 1;
		padding-left: ~'32rpx';
		display: flex;
		flex-direction: column;
		justify-content: space-between;
		.item-name {
			overflow: hidden;
			text-overflow: ellipsis;
			display: -webkit-box;
			-webkit-box-orient: vertical;
			-webkit-line-clamp: 2;
			color: @title-color;
			font-size: ~'26rpx';
		}
		.item-prop {
			color: @hint-color;
			font-size: @hint-font-size;
			padding-top: ~'4rpx';
			padding-bottom: ~'2rpx';
		}
	}

	.item-price {
		display: inline-block;
		color: @active-color;
		font-size: @price-font-size;
	}

	.item-display-price {
		padding-left: ~'12rpx';
		display: inline-block;
		color: @hint-color;
		font-size: @hint-font-size;
		text-decoration: line-through;
	}

	.item-count {
		display: inline-block;
		float: right;
		color: @hint-color;
		font-size: @hint-font-size;
	}

	image {
		width: ~'32rpx';
		height: ~'32rpx';
		padding-bottom: ~'2rpx';
	}

	.footer {
		position: fixed;
		bottom: 0;
		width: 100%;
		border-top: ~'1rpx' solid @hairline-color;
		line-height: ~'90rpx';
		height: ~'90rpx';
		background: #fff;
		z-index: 998;
		view {
			display: inline-block;
		}
		.total-text {
			padding-left: ~'30rpx';
			color: @desc-color;
			font-size: @desc-font-size;
		}
		.total-money {
			color: @active-color;
			font-size: @price-font-size;
			padding-left: ~'2rpx';
			font-weight: bold;
		}
		.total-num {
			float: right;
			padding-right: ~'6rpx';
			font-size: @hint-font-size;
			color: @hint-color;
		}
		.confirm-btn {
			padding: 0 ~'60rpx';
			text-align: center;
			float: right;
			color: #fff;
			background: @active-color;
			font-size: @title-font-size;
		}
	}

	.address-box {
		width: 100%;
		background: url(http://p3orru6vb.bkt.clouddn.com/arrow-right.png) no-repeat ~'705rpx' center,
		url(http://p3orru6vb.bkt.clouddn.com/address_bg.png) no-repeat center top;
		background-size: ~'16rpx auto,750rpx 6rpx';
		background-color: #fff;
		margin: ~'20rpx' 0;
	}

	.add-addres {
		width: 100%;
	}

	.add-address .title {
		font-size: ~'28rpx';
		color: #000;
		margin-left: ~'30rpx';
		background: url(http://p3orru6vb.bkt.clouddn.com/add-address.png) no-repeat left center;
		background-size: ~'60rpx' auto;
		padding: ~'40rpx 0 40rpx 80rpx';
	}

	.show-address {
		width: ~'664rpx';
		box-sizing: border-box;
		padding-left: ~'100rpx';
		background: url(http://p3orru6vb.bkt.clouddn.com/address.png) no-repeat ~'30rpx' center;
		background-size: ~'46rpx' auto;
	}

	.show-address .name-tel {
		font-size: @title-font-size;
		color: @desc-color;
		padding: ~'30rpx 0 6rpx 0';
	}

	.show-address .address-text {
		font-size: @desc-font-size;
		color: @hint-color;
		padding-bottom: ~'28rpx';
		line-height: ~'36rpx';
	}
</style>
